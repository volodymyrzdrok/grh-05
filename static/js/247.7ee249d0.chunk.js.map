{"version":3,"file":"static/js/247.7ee249d0.chunk.js","mappings":"yNAqCA,UAhCa,SAAAA,GACX,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACRC,EAAaH,EACd,GAAE,CAACA,IAEJ,IAAMG,EAAY,mCAAG,WAAMC,GAAN,iGAEMC,EAAAA,EAAAA,IAAeD,GAFrB,OAEXE,EAFW,OAGjBP,EAAaO,EAASC,KAAKC,MAHV,gDAKjBC,QAAQC,IAAR,MALiB,qGAAH,sDAUlB,OACE,wBACGZ,EAAUa,OAAS,GAClBb,EAAUc,KAAI,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,UAAlB,OACZ,yBACE,uBAAID,KADGC,EADG,KAOrB,C,+LC/BKC,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAAmCC,EAAnC,+BAAiD,MAAjD,kBAEoBC,EAAAA,EAAAA,IAAA,0BAA6BD,GAAe,CACjEE,OAAQ,CACNC,QAASL,KAJV,cAEGT,EAFH,yBAOIA,GAPJ,gCASHG,QAAQY,MAAR,MATG,iFAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,gGAEoBL,EAAAA,EAAAA,IAAA,gBAA2B,CAChDC,OAAQ,CACNC,QAASL,EACTS,MAAOD,KALR,cAEGjB,EAFH,yBAQIA,GARJ,gCAUHG,QAAQY,MAAR,MAVG,gFAcA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEoBR,EAAAA,EAAAA,IAAA,iBAAoBQ,GAAY,CACrDP,OAAQ,CACNC,QAASL,KAJV,cAEGT,EAFH,yBAOIA,GAPJ,gCASHG,QAAQY,MAAR,MATG,gFAaA,SAAehB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BqB,GAA9B,gGAEoBR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,YAAwC,CAC7DP,OAAQ,CACNC,QAASL,KAJV,cAEGT,EAFH,yBAOIA,GAPJ,gCASHG,QAAQY,MAAR,MATG,gFAaA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,gGAEoBR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,YAAwC,CAC7DP,OAAQ,CACNC,QAASL,KAJV,cAEGT,EAFH,yBAOIA,GAPJ,gCASHG,QAAQY,MAAR,MATG,gFAvDPH,EAAAA,EAAAA,SAAAA,QAHgB,8B","sources":["components/Cast/Cast.jsx","sevices/apiMovies.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { fetchMovieCast } from 'sevices/apiMovies';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = props => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCast(movieId);\n  }, [movieId]);\n\n  const getMovieCast = async id => {\n    try {\n      const response = await fetchMovieCast(id);\n      setMovieCast(response.data.cast);\n    } catch (error) {\n      console.log(error);\n    } finally {\n    }\n  };\n\n  return (\n    <ul>\n      {movieCast.length > 0 &&\n        movieCast.map(({ original_name, credit_id }) => (\n          <li key={credit_id}>\n            <p>{original_name}</p>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nCast.propTypes = {};\n\nexport default Cast;\n","import axios from 'axios';\nconst MOVIES_URL = `https://api.themoviedb.org/3`;\nconst KEY_API = 'c89f43b1c825df5dc6e73406f0f79577';\n\naxios.defaults.baseURL = MOVIES_URL;\n\nexport async function fetchTrandingMovies(time_window = 'day') {\n  try {\n    const response = await axios.get(`/trending/movie/${time_window}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchSerchinsMovies(queryValue) {\n  try {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: KEY_API,\n        query: queryValue,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieDetails(movie_id) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieCast(movie_id) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}/credits`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieReviews(movie_id) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}/reviews`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["props","useState","movieCast","setMovieCast","movieId","useParams","useEffect","getMovieCast","id","fetchMovieCast","response","data","cast","console","log","length","map","original_name","credit_id","KEY_API","fetchTrandingMovies","time_window","axios","params","api_key","error","fetchSerchinsMovies","queryValue","query","fetchMovieDetails","movie_id","fetchMovieReviews"],"sourceRoot":""}