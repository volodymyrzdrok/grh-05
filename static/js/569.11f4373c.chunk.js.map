{"version":3,"file":"static/js/569.11f4373c.chunk.js","mappings":"kJA4BA,IAvBkB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACnB,GAA6BC,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAElB,OACE,0BACGH,EAAOI,KAAI,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,GAAnB,OACV,yBACE,SAAC,KAAD,CACEC,GAAE,UAAKC,EAAAA,EAAAA,OAAL,YAAsBF,GACxBG,MAAO,CAAEC,iBAAkBR,EAAWC,GAFxC,SAIGE,KALIC,EADC,KAWZ,oBAGL,C,iHC4BD,UA7CqB,SAAAK,GACnB,OAAqCC,EAAAA,EAAAA,UAAS,IAA9C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,SAE/BC,EAAe,mCAAG,WAAMC,GAAN,iGAEGC,EAAAA,EAAAA,IAAoBD,GAFvB,OAEdE,EAFc,OAIpBT,EAAcS,EAASC,KAAKC,SAJR,gDAMpBC,QAAQC,MAAR,MANoB,qGAAH,uDAWrBC,EAAAA,EAAAA,YAAU,WACJV,GACFE,EAAgBF,EAEnB,GAAE,CAACA,IAWJ,OACE,iCACE,kBAAMW,SAXW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAQF,EAAEG,OAAOC,MAAMF,MAAMG,cAAcC,OACjDnB,EAAgB,CAAEoB,MAAOL,IAEzBF,EAAEG,OAAOK,OACV,EAIiCC,OAAO,GAArC,WACE,kBAAOC,KAAK,QAAQC,KAAK,UACzB,0CAGD5B,EAAY6B,OAAS,IAAK,SAAC,IAAD,CAAW1C,OAAQa,MAGnD,C,+LC9CK8B,EAAU,mCAIT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAAmCC,EAAnC,+BAAiD,MAAjD,kBAEoBC,EAAAA,EAAAA,IAAA,0BAA6BD,GAAe,CACjEE,OAAQ,CACNC,QAASL,KAJV,cAEGpB,EAFH,yBAOIA,GAPJ,gCASHG,QAAQC,MAAR,MATG,iFAaA,SAAeL,EAAtB,+CAAO,OAAP,oBAAO,WAAmCD,GAAnC,gGAEoByB,EAAAA,EAAAA,IAAA,gBAA2B,CAChDC,OAAQ,CACNC,QAASL,EACTN,MAAOhB,KALR,cAEGE,EAFH,yBAQIA,GARJ,gCAUHG,QAAQC,MAAR,MAVG,gFAcA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEoBJ,EAAAA,EAAAA,IAAA,iBAAoBI,GAAY,CACrDH,OAAQ,CACNC,QAASL,KAJV,cAEGpB,EAFH,yBAOIA,GAPJ,gCASHG,QAAQC,MAAR,MATG,gFAaA,SAAewB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,gGAEoBJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,YAAwC,CAC7DH,OAAQ,CACNC,QAASL,KAJV,cAEGpB,EAFH,yBAOIA,GAPJ,gCASHG,QAAQC,MAAR,MATG,gFAaA,SAAeyB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,gGAEoBJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,YAAwC,CAC7DH,OAAQ,CACNC,QAASL,KAJV,cAEGpB,EAFH,yBAOIA,GAPJ,gCASHG,QAAQC,MAAR,MATG,gFAvDPmB,EAAAA,EAAAA,SAAAA,QAHgB,8B","sources":["components/MoviesList/MovieList.jsx","components/SearchMovies/SearchMovies.jsx","sevices/apiMovies.js"],"sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport routes from 'routes';\n\nconst MovieList = ({ movies }) => {\n  const { pathname, search } = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ original_title, id }) => (\n        <li key={id}>\n          <NavLink\n            to={`${routes.movies}/${id}`}\n            state={{ prevLocationPath: pathname + search }}\n          >\n            {original_title}\n          </NavLink>\n          {/* <p>{original_title}</p> */}\n        </li>\n      ))}\n      <li></li>\n    </ul>\n  );\n};\n\nMovieList.propTypes = {};\n\nexport default MovieList;\n","import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSerchinsMovies } from 'sevices/apiMovies';\nimport MovieList from 'components/MoviesList/MovieList';\nimport { useEffect } from 'react';\n\nconst SearchMovies = props => {\n  const [moviesFound, setMovieFound] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const valueParams = searchParams.get('query');\n\n  const getSearchMovies = async queryValue => {\n    try {\n      const response = await fetchSerchinsMovies(queryValue);\n\n      setMovieFound(response.data.results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n    }\n  };\n\n  useEffect(() => {\n    if (valueParams) {\n      getSearchMovies(valueParams);\n    }\n  }, [valueParams]);\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n\n    const value = e.target.input.value.toLowerCase().trim();\n    setSearchParams({ query: value });\n\n    e.target.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmitForm} action=\"\">\n        <input name=\"input\" type=\"text\" />\n        <button>search</button>\n      </form>\n\n      {moviesFound.length > 0 && <MovieList movies={moviesFound} />}\n    </>\n  );\n};\n\nSearchMovies.propTypes = {};\n\nexport default SearchMovies;\n","import axios from 'axios';\nconst MOVIES_URL = `https://api.themoviedb.org/3`;\nconst KEY_API = 'c89f43b1c825df5dc6e73406f0f79577';\n\naxios.defaults.baseURL = MOVIES_URL;\n\nexport async function fetchTrandingMovies(time_window = 'day') {\n  try {\n    const response = await axios.get(`/trending/movie/${time_window}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchSerchinsMovies(queryValue) {\n  try {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: KEY_API,\n        query: queryValue,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieDetails(movie_id) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieCast(movie_id) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}/credits`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchMovieReviews(movie_id) {\n  try {\n    const response = await axios.get(`/movie/${movie_id}/reviews`, {\n      params: {\n        api_key: KEY_API,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["movies","useLocation","pathname","search","map","original_title","id","to","routes","state","prevLocationPath","props","useState","moviesFound","setMovieFound","useSearchParams","searchParams","setSearchParams","valueParams","get","getSearchMovies","queryValue","fetchSerchinsMovies","response","data","results","console","error","useEffect","onSubmit","e","preventDefault","value","target","input","toLowerCase","trim","query","reset","action","name","type","length","KEY_API","fetchTrandingMovies","time_window","axios","params","api_key","fetchMovieDetails","movie_id","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}